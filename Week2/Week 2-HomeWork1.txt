Homework Assignment 1:

- I am going to share to 2-3 plain selenium java code
- You are going to write prompt to convert selenium to playwright typescript
- Once you convert, you need to copy to this URL and run !

https://try.playwright.tech/?l=playwright-test

Hint: Use ICE POT framework to generate !! 

Note: 

- The selenium code should be working code 

https://github.com/TestLeafInc/TestLeafSeleniumTraining



Context:
You are an AI assistant for converting selenium testscript to playwright testscript

  
    Given the following Selenium code:
	
	package week2.day1;


import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Login {
	
	public static void main(String[] args) {
	
		
		// Step 0) Setup the chromedriver using webdrivermanager software
		WebDriverManager.chromedriver().setup(); // .exe or binary
		
		// Step 1) Launch the chrome browser (Class Name -> ChromeDriver)
		ChromeDriver driver = new ChromeDriver();
		
		// Step 2) Load the URL (http://leaftaps.com/opentaps/control/main) -> get
		driver.get("http://leaftaps.com/opentaps");
		
		// Step 2b) Add common time to wait for all/any elements to load (Write once)
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		
		// Step 3) Maximize the chrome browser
		driver.manage().window().maximize();
		
		// Step 4) Find the username and type the value (DemoSalesManager)
		driver.findElement(By.id("username1")).sendKeys("DemoSalesManager");
		
		// Step 5) Find the password and type the value (crmsfa)
		driver.findElement(By.id("password")).sendKeys("crmsfa");	
		
		// Step 6) Find the login button and click
		driver.findElement(By.className("decorativeSubmit")).click();
		
		// Step 7) Verify the title 
		String title = driver.getTitle();
		System.out.println(title);

	}

}

Instruction:
   [IMPORTANT] Test the converted playwright typescript code in https://try.playwright.tech/?l=playwright-test fix if there are any issues and  share the working code
 - [MANDATORY] Every method should have proper comments 
 - Implementation guidelines:
   - Use assertion-based wait
   - Handle timeouts
   - Use v1.55.0 version
   - Import required modules
   - [CRITICAL] use right locators starting id, name, class, link text and finally xpath
   
   Example:
   
   import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});

Output:Playwright typescript


Response(chat gpt):

import { test, expect } from '@playwright/test';

/**
 * Test to perform login on Leaftaps and verify the page title.
 */
test('Login to Leaftaps and verify title', async ({ page }) => {

  // Step 1: Navigate to the Leaftaps login page
  await page.goto('http://leaftaps.com/opentaps/control/main', { waitUntil: 'networkidle' });

  // Step 2: Enter the username
  const usernameInput = page.locator('#username');
  await expect(usernameInput).toBeVisible();
  await usernameInput.fill('DemoSalesManager');

  // Step 3: Enter the password
  const passwordInput = page.locator('#password');
  await expect(passwordInput).toBeVisible();
  await passwordInput.fill('crmsfa');

  // Step 4: Click the login button
  const loginButton = page.locator('.decorativeSubmit');
  await expect(loginButton).toBeVisible();
  await Promise.all([
    page.waitForNavigation({ waitUntil: 'networkidle' }),
    loginButton.click()
  ]);

  // Step 5: Verify that the page title contains "Leaftaps"
  await expect(page).toHaveTitle(/Leaftaps/);
});


Response : (copilot)

import { test, expect } from '@playwright/test';

/**
 * Performs login on Leaftaps and verifies the page title post-login.
 */
test('Leaftaps login test', async ({ page }) => {
  // Step 1: Navigate to the Leaftaps login page
  await page.goto('http://leaftaps.com/opentaps', { waitUntil: 'networkidle' });

  // Step 2: Ensure the username field is visible and enabled, then input username
  const usernameInput = page.locator('#username');
  await expect(usernameInput).toBeVisible();
  await expect(usernameInput).toBeEnabled();
  await usernameInput.fill('DemoSalesManager');

  // Step 3: Ensure the password field is visible and enabled, then input password
  const passwordInput = page.locator('#password');
  await expect(passwordInput).toBeVisible();
  await expect(passwordInput).toBeEnabled();
  await passwordInput.fill('crmsfa');

  // Step 4: Ensure the login button is visible and enabled, then click and wait for navigation
  const loginButton = page.locator('.decorativeSubmit');
  await expect(loginButton).toBeVisible();
  await expect(loginButton).toBeEnabled();
  await Promise.all([
    page.waitForNavigation({ waitUntil: 'networkidle' }),
    loginButton.click()
  ]);

  // Step 5: Assert that page title contains expected text
  await expect(page).toHaveTitle(/Leaftaps/);
});